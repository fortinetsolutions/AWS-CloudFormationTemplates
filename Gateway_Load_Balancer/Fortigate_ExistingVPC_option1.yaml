---
AWSTemplateFormatVersion: '2010-09-09'
Description: "AWS CFT to deploy a FGCP based Active-Passive HA solution with two FortiGates in a single AZ"
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: VPC Configuration
      Parameters:
      - VPCID
      - VPCCIDR
      - PublicRouteTableID
      - Public1Subnet
      - Private1Subnet
      - HASync1Subnet
      - HAMgmt1Subnet
      - Public2Subnet
      - Private2Subnet
      - HASync2Subnet
      - HAMgmt2Subnet
    - Label:
        default: FortiGate Instance Configuration
      Parameters:
      - InstanceType
      - CIDRForInstanceAccess
      - AZ1
      - AZ2
      - KeyPair
      - AdminPw
      - InitS3Bucket
      - InitS3BucketRegion
      - LicenseType
      - FortiGate1LicenseFile
      - FortiGate2LicenseFile
      - Public1SubnetRouterIP
      - Private1SubnetRouterIP
      - HAMgmt1SubnetRouterIP
      - Public2SubnetRouterIP
      - Private2SubnetRouterIP
      - HAMgmt2SubnetRouterIP
      - LoadBalancerIP1
      - LoadBalancerIP2
    - Label:
        default: Interface IP Configuration for FortiGate 1
      Parameters:
      - FortiGate1PrivateCIDR
      - FortiGate1PublicIP
      - FortiGate1PrivateIP
      - FortiGate1HAsyncIP
      - FortiGate1HAmgmtIP
    - Label:
        default: Interface IP Configuration for FortiGate 2
      Parameters:
      - FortiGate2PrivateCIDR
      - FortiGate2PublicIP
      - FortiGate2PrivateIP
      - FortiGate2HAsyncIP
      - FortiGate2HAmgmtIP
Parameters:
  VPCID:
    Type: AWS::EC2::VPC::Id
    Description: Select the VPC to use
  VPCCIDR:
    Type: String
    Default: 10.0.0.0/16
    Description: Provide a network CIDR for the VPC
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    ConstraintDescription: must be a valid CIDR block format.
  PublicRouteTableID:
    Type: String
    Description: Provide the Public Route Table ID
  Public1Subnet:
    Type: AWS::EC2::Subnet::Id
    Description: Select the subnet for PublicSubnet 1
  Private1Subnet:
    Type: AWS::EC2::Subnet::Id
    Description: Select the subnet for PrivateSubnet 1
  HASync1Subnet:
    Type: AWS::EC2::Subnet::Id
    Description: Select the subnet for HASyncSubnet 1
  HAMgmt1Subnet:
    Type: AWS::EC2::Subnet::Id
    Description: Select the subnet for HAMgmtSubnet 1
  Public2Subnet:
    Type: AWS::EC2::Subnet::Id
    Description: Select the subnet for PublicSubnet 2
  Private2Subnet:
    Type: AWS::EC2::Subnet::Id
    Description: Select the subnet for PrivateSubnet 2
  HASync2Subnet:
    Type: AWS::EC2::Subnet::Id
    Description: Select the subnet for HASyncSubnet 2
  HAMgmt2Subnet:
    Type: AWS::EC2::Subnet::Id
    Description: Select the subnet for HAMgmtSubnet 2
  Public1SubnetRouterIP:
    Type: String
    Default: 10.0.1.1
    Description: Provide the IP address of the AWS intrinsic router (First IP from
      PublicSubnet1)
  Private1SubnetRouterIP:
    Type: String
    Default: 10.0.2.1
    Description: Provide the IP address of the AWS intrinsic router (First IP from
      PrivateSubnet1)
  HAMgmt1SubnetRouterIP:
    Type: String
    Default: 10.0.4.1
    Description: Provide the IP address of the AWS intrinsic router (First IP from HAMgmtSubnet 1)
  LoadBalancerIP1:
    Type: String
    Description: Provide the IP address of the AGW Load Balancer in AZ1
  LoadBalancerIP2:
    Type: String
    Description: Provide the IP address of the AGW Load Balancer in AZ2
  Public2SubnetRouterIP:
    Type: String
    Default: 10.0.10.1
    Description: Provide the IP address of the AWS intrinsic router (First IP from
      PublicSubnet2)
  Private2SubnetRouterIP:
    Type: String
    Default: 10.0.20.1
    Description: Provide the IP address of the AWS intrinsic router (First IP from
      PrivateSubnet2)
  HAMgmt2SubnetRouterIP:
    Type: String
    Default: 10.0.40.1
    Description: Provide the IP address of the AWS intrinsic router (First IP from HAMgmtSubnet)
  FortiGate1PrivateCIDR:
    Type: String
    Description: Provide the Subnet address in CIDR form for the  private interface of FortiGate1
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]){1}(\\/([0-9]|[1-2][0-9]|3[0-2]))?$"
    ConstraintDescription: must be a valid CIDR block format.
  FortiGate1PublicIP:
    Type: String
    Default: 10.0.1.10/24
    Description: Provide the IP address in CIDR form for the public interface of FortiGate1
      (IP from PublicSubnet1)
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]){1}(\\/([0-9]|[1-2][0-9]|3[0-2]))?$"
    ConstraintDescription: must be a valid CIDR block format.
  FortiGate1PrivateIP:
    Type: String
    Default: 10.0.2.10/24
    Description: Provide the IP address in CIDR form for the private interface of
      FortiGate1 (IP from PrivateSubnet1)
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]){1}(\\/([0-9]|[1-2][0-9]|3[0-2]))?$"
    ConstraintDescription: must be a valid CIDR block format.
  FortiGate1HAsyncIP:
    Type: String
    Default: 10.0.3.10/24
    Description: Provide the IP address in CIDR form for the ha sync interface of
      FortiGate1 (IP from HASyncSubnet1)
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]){1}(\\/([0-9]|[1-2][0-9]|3[0-2]))?$"
    ConstraintDescription: must be a valid CIDR block format.
  FortiGate1HAmgmtIP:
    Type: String
    Default: 10.0.4.10/24
    Description: Provide the IP address in CIDR form for the ha mgmt interface of FortiGate1 (IP from HAMgmtSubnet)
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]){1}(\\/([0-9]|[1-2][0-9]|3[0-2]))?$"
    ConstraintDescription: must be a valid CIDR block format.
  FortiGate2PrivateCIDR:
    Type: String
    Description: Provide the Subnet address in CIDR form for the  private interface of FortiGate2
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]){1}(\\/([0-9]|[1-2][0-9]|3[0-2]))?$"
    ConstraintDescription: must be a valid CIDR block format.
  FortiGate2PublicIP:
    Type: String
    Default: 10.0.10.1/24
    Description: Provide the IP address in CIDR form for the public interface of FortiGate2
      (IP from PublicSubnet1)
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]){1}(\\/([0-9]|[1-2][0-9]|3[0-2]))?$"
    ConstraintDescription: must be a valid CIDR block format.
  FortiGate2PrivateIP:
    Type: String
    Default: 10.0.20.10/24
    Description: Provide the IP address in CIDR form for the private interface of
      FortiGate2 (IP from PrivateSubnet1)
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]){1}(\\/([0-9]|[1-2][0-9]|3[0-2]))?$"
    ConstraintDescription: must be a valid CIDR block format.
  FortiGate2HAsyncIP:
    Type: String
    Default: 10.0.30.10/24
    Description: Provide the IP address in CIDR form for the ha sync interface of
      FortiGate2 (IP from HASyncSubnet1)
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]){1}(\\/([0-9]|[1-2][0-9]|3[0-2]))?$"
    ConstraintDescription: must be a valid CIDR block format.
  FortiGate2HAmgmtIP:
    Type: String
    Default: 10.0.40.10/24
    Description: Provide the IP address in CIDR form for the ha mgmt interface of FortiGate2 (IP from HAMgmtSubnet)
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]){1}(\\/([0-9]|[1-2][0-9]|3[0-2]))?$"
    ConstraintDescription: must be a valid CIDR block format.
  InstanceType:
    Type: String
    Default: c5.xlarge
    Description: Select the instance type for the FortiGates
    AllowedValues:
    - c5.xlarge
    - c5.2xlarge
    - c5.4xlarge
    - c5.9xlarge
    - c5.18xlarge
    - c5n.xlarge
    - c5n.2xlarge
    - c5n.4xlarge
    - c5n.9xlarge
    - c5n.18xlarge
  CIDRForInstanceAccess:
    Type: String
    Default: 0.0.0.0/0
    Description: Provide a network CIDR from which the FortiGate instances will be
      accessed
  KeyPair:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Select a keypair to associate with the FortiGates
  AdminPw:
    Type: String
    Description: Set admin password on Fortigate
  AZ1:
    Type: AWS::EC2::AvailabilityZone::Name
    Description: Select an Availability Zone for FortiGates
  AZ2:
    Type: AWS::EC2::AvailabilityZone::Name
    Description: Select an Availability Zone for FortiGates
  InitS3Bucket:
    Type: String
    MinLength: '1'
    Description: Provide the Init S3 Bucket name, where your config files will be
      created
  InitS3BucketRegion:
    Type: String
    Description: Select the Region where the Init S3 Bucket exists *** the bucket
      should exist in the same region as this deployment for successful bootstrapping
      ***
    AllowedValues:
    - ap-east-1
    - ap-northeast-1
    - ap-northeast-2
    - ap-south-1
    - ap-southeast-1
    - ap-southeast-2
    - ca-central-1
    - eu-central-1
    - eu-north-1
    - eu-west-1
    - eu-west-2
    - eu-west-3
    - me-south-1
    - sa-east-1
    - us-east-1
    - us-east-2
    - us-west-1
    - us-west-2
  LicenseType:
    Type: String
    Description: Select the license type for the FortiGates
    AllowedValues:
    - PAYG
    - BYOL
  FortiGate1LicenseFile:
    Type: String
    Description: "[BYOL Only, leave blank for PAYG] Provide the name of the BYOL license
      file in the Init S3 Bucket for FortiGate1 (ie fgt1.lic or prefix/fgt1.lic)"
  FortiGate2LicenseFile:
    Type: String
    Description: "[BYOL Only, leave blank for PAYG] Provide the name of the BYOL license
      file in the Init S3 Bucket for FortiGate2 (ie fgt2.lic or prefix/fgt2.lic)"
Conditions:
  LicenseTypeBYOL:
    Fn::Equals:
    - Ref: LicenseType
    - BYOL
Resources:
  S3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: "*"
            Action:
              - s3:GetObject
            Resource:
              - "*"
      RouteTableIds:
        - Ref: PublicRouteTableID
      ServiceName:
        Fn::Sub: com.amazonaws.${AWS::Region}.s3
      VpcId:
        Ref: VPCID
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: FGCPPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - ec2:Describe*
            - ec2:AssociateAddress
            - ec2:AssignPrivateIpAddresses
            - ec2:UnassignPrivateIpAddresses
            - ec2:ReplaceRoute
            - s3:GetObject
            Resource: "*"
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: InstanceRole
  FortiGateSecGrp:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Ref: VPCID
      GroupDescription: FortigateSecGrp
      SecurityGroupIngress:
      - Description: Allow remote access to FGT
        IpProtocol: "-1"
        FromPort: '0'
        ToPort: '65535'
        CidrIp:
          Ref: CIDRForInstanceAccess
      - Description: Allow local VPC access to FGT
        IpProtocol: "-1"
        FromPort: '0'
        ToPort: '65535'
        CidrIp:
          Ref: VPCCIDR
  FortiGateSecGrpHArule:
    DependsOn: FortiGateSecGrp
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:
        Ref: FortiGateSecGrp
      Description: Allow FGTs to access each other
      IpProtocol: "-1"
      FromPort: '0'
      ToPort: '65535'
      SourceSecurityGroupId:
        Ref: FortiGateSecGrp
  Fgt1:
    Type: AWS::EC2::Instance
    Properties:
      ImageId:
        Fn::GetAtt:
        - RunImageFunction
        - ami
      InstanceType:
        Ref: InstanceType
      IamInstanceProfile:
        Ref: InstanceProfile
      KeyName:
        Ref: KeyPair
      NetworkInterfaces:
      - NetworkInterfaceId:
          Ref: fgt1eni0
        DeviceIndex: '0'
      - NetworkInterfaceId:
          Ref: fgt1eni1
        DeviceIndex: '1'
      - NetworkInterfaceId:
          Ref: fgt1eni2
        DeviceIndex: '2'
      - NetworkInterfaceId:
          Ref: fgt1eni3
        DeviceIndex: '3'
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - ''
          - - Ref: AWS::StackName
            - "-FortiGate1"
      UserData:
        Fn::Base64:
          Fn::Join:
          - ''
          - - "{\n"
            - '"bucket"'
            - ' : "'
            - Ref: InitS3Bucket
            - "\""
            - ",\n"
            - '"region"'
            - " : "
            - "\""
            - Ref: InitS3BucketRegion
            - "\""
            - ",\n"
            - '"license"'
            - " : "
            - "\""
            - "/"
            - Ref: FortiGate1LicenseFile
            - "\""
            - ",\n"
            - '"config"'
            - " : "
            - "\""
            - /fgt1.txt"
            - "\n"
            - "}"
  Fgt2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId:
        Fn::GetAtt:
        - RunImageFunction
        - ami
      InstanceType:
        Ref: InstanceType
      IamInstanceProfile:
        Ref: InstanceProfile
      KeyName:
        Ref: KeyPair
      NetworkInterfaces:
      - NetworkInterfaceId:
          Ref: fgt2eni0
        DeviceIndex: '0'
      - NetworkInterfaceId:
          Ref: fgt2eni1
        DeviceIndex: '1'
      - NetworkInterfaceId:
          Ref: fgt2eni2
        DeviceIndex: '2'
      - NetworkInterfaceId:
          Ref: fgt2eni3
        DeviceIndex: '3'
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - ''
          - - Ref: AWS::StackName
            - "-FortiGate2"
      UserData:
        Fn::Base64:
          Fn::Join:
            - ''
            - - "{\n"
              - '"bucket"'
              - ' : "'
              - Ref: InitS3Bucket
              - "\""
              - ",\n"
              - '"region"'
              - " : "
              - "\""
              - Ref: InitS3BucketRegion
              - "\""
              - ",\n"
              - '"license"'
              - " : "
              - "\""
              - "/"
              - Ref: FortiGate2LicenseFile
              - "\""
              - ",\n"
              - '"config"'
              - " : "
              - "\""
              - /fgt2.txt"
              - "\n"
              - "}"
  fgt1eni0:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: port1
      GroupSet:
      - Ref: FortiGateSecGrp
      SourceDestCheck: 'false'
      SubnetId:
        Ref: Public1Subnet
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - ''
          - - Ref: AWS::StackName
            - "-fgt1eni0"
      - Key: Interface
        Value: eth0
      PrivateIpAddresses:
      - PrivateIpAddress:
          Fn::Select:
          - '0'
          - Fn::Split:
            - "/"
            - Ref: FortiGate1PublicIP
        Primary: 'true'
  fgt2eni0:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: port1
      GroupSet:
      - Ref: FortiGateSecGrp
      SourceDestCheck: 'false'
      SubnetId:
        Ref: Public2Subnet
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - ''
          - - Ref: AWS::StackName
            - "-fgt2eni0"
      - Key: Interface
        Value: eth0
      PrivateIpAddresses:
      - PrivateIpAddress:
          Fn::Select:
          - '0'
          - Fn::Split:
            - "/"
            - Ref: FortiGate2PublicIP
        Primary: 'true'
  fgt1eni1:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: port2
      GroupSet:
      - Ref: FortiGateSecGrp
      SourceDestCheck: 'false'
      SubnetId:
        Ref: Private1Subnet
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - ''
          - - Ref: AWS::StackName
            - "-fgt1eni1"
      PrivateIpAddress:
        Fn::Select:
        - '0'
        - Fn::Split:
          - "/"
          - Ref: FortiGate1PrivateIP
  fgt2eni1:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: port2
      GroupSet:
      - Ref: FortiGateSecGrp
      SourceDestCheck: 'false'
      SubnetId:
        Ref: Private2Subnet
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - ''
          - - Ref: AWS::StackName
            - "-fgt2eni1"
      PrivateIpAddress:
        Fn::Select:
        - '0'
        - Fn::Split:
          - "/"
          - Ref: FortiGate2PrivateIP
  fgt1eni2:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: port3
      GroupSet:
      - Ref: FortiGateSecGrp
      SourceDestCheck: 'false'
      SubnetId:
        Ref: HASync1Subnet
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - ''
          - - Ref: AWS::StackName
            - "-fgt1eni2"
      PrivateIpAddress:
        Fn::Select:
        - '0'
        - Fn::Split:
          - "/"
          - Ref: FortiGate1HAsyncIP
  fgt1eni3:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: port4
      GroupSet:
      - Ref: FortiGateSecGrp
      SourceDestCheck: 'false'
      SubnetId:
        Ref: HAMgmt1Subnet
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - ''
          - - Ref: AWS::StackName
            - "-fgt1eni3"
      PrivateIpAddress:
        Fn::Select:
        - '0'
        - Fn::Split:
          - "/"
          - Ref: FortiGate1HAmgmtIP
  fgt2eni2:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: port3
      GroupSet:
      - Ref: FortiGateSecGrp
      SourceDestCheck: 'false'
      SubnetId:
        Ref: HASync2Subnet
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - ''
          - - Ref: AWS::StackName
            - "-fgt2eni2"
      PrivateIpAddress:
        Fn::Select:
        - '0'
        - Fn::Split:
          - "/"
          - Ref: FortiGate2HAsyncIP
  fgt2eni3:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: port4
      GroupSet:
      - Ref: FortiGateSecGrp
      SourceDestCheck: 'false'
      SubnetId:
        Ref: HAMgmt2Subnet
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - ''
          - - Ref: AWS::StackName
            - "-fgt2eni3"
      PrivateIpAddress:
        Fn::Select:
        - '0'
        - Fn::Split:
          - "/"
          - Ref: FortiGate2HAmgmtIP
  ClusterEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    DependsOn: Fgt1
  Fgt1EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    DependsOn: Fgt1
  Fgt2EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    DependsOn: Fgt2
  ClusterIPASSOCIATION:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId:
        Fn::GetAtt:
        - ClusterEIP
        - AllocationId
      NetworkInterfaceId:
        Ref: fgt1eni0
      PrivateIpAddress:
        Fn::Select:
        - '0'
        - Fn::Split:
          - "/"
          - Ref: FortiGate1PublicIP
    DependsOn: ClusterEIP
  Fgt1EIPASSOCIATION:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId:
        Fn::GetAtt:
        - Fgt1EIP
        - AllocationId
      NetworkInterfaceId:
        Ref: fgt1eni3
      PrivateIpAddress:
        Fn::Select:
        - '0'
        - Fn::Split:
          - "/"
          - Ref: FortiGate1HAmgmtIP
    DependsOn: Fgt1EIP
  Fgt2EIPASSOCIATION:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId:
        Fn::GetAtt:
        - Fgt2EIP
        - AllocationId
      NetworkInterfaceId:
        Ref: fgt2eni3
      PrivateIpAddress:
        Fn::Select:
        - '0'
        - Fn::Split:
          - "/"
          - Ref: FortiGate2HAmgmtIP
    DependsOn: Fgt2EIP
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: S3AccessRole
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - s3:PutObject
            - ec2:DescribeImages
            Resource: "*"
          - Effect: Allow
            Action:
            - logs:*
            Resource: "*"
  ImageFunction:
    Type: AWS::Lambda::Function
    DependsOn: LambdaRole
    Properties:
      Code:
        ZipFile:
          Fn::Join:
          - "\n"
          - - import boto3
            - import cfnresponse
            - import logging
            - import json
            - logger = logging.getLogger()
            - logger.setLevel(logging.INFO)
            - client = boto3.client('ec2')
            - ''
            - 'def handler(event, context):'
            - "    logger.info('<-- event received: {}'.format(json.dumps(event)))"
            - "    try:"
            - "        resp = client.describe_images("
            - "            Filters=[{'Name': 'name', 'Values': [event['ResourceProperties']['LicenseType']]}],"
            - "            Owners=['679593333241', '464423754048', '211372476111']"
            - "        )"
            - "    except Exception as error:"
            - "        logger.error('<--!! Exception: {}'.format(error))"
            - "        responseData = {'msg':'error'}"
            - "        cfnresponse.send(event, context, cfnresponse.FAILED, responseData)"
            - "        exit()"
            - "    if resp['ResponseMetadata']['HTTPStatusCode'] == 200 and resp['Images'] != []:"
            - "        ami_dict = {}"
            - "        ami_list = []"
            - "        for entry in resp['Images']:"
            - "            key = entry['CreationDate']"
            - "            ami_dict[key] = entry['ImageId']"
            - "        ami_list = sorted(ami_dict, reverse = True)"
            - "        logger.info('--> found latest AMI: {}, {}'.format(ami_dict[ami_list[0]], ami_list[0]))"
            - "        responseData = {'ami': ami_dict[ami_list[0]]}"
            - "        cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)"
            - "    else:"
            - "        logger.error('!!--> Unable to find AMI in response! {}'.format(resp))"
            - "        responseData = {'msg':'error'}"
            - "        cfnresponse.send(event, context, cfnresponse.FAILED, responseData)"
            - ''
      Role:
        Fn::GetAtt:
        - LambdaRole
        - Arn
      Timeout: 120
      Handler: index.handler
      Runtime: python2.7
      MemorySize: 128
  RunImageFunction:
    Type: Custom::ImageFunction
    DependsOn: ImageFunction
    Properties:
      ServiceToken:
        Fn::GetAtt:
        - ImageFunction
        - Arn
      LicenseType:
        Fn::If:
        - LicenseTypeBYOL
        - FortiGate-VM64-AWS *(6.4.*)*
        - FortiGate-VM64-AWSONDEMAND *(6.4.*)*AGWTEST4*
  InitFunction:
    Type: AWS::Lambda::Function
    DependsOn: LambdaRole
    Properties:
      Code:
        ZipFile:
          Fn::Join:
          - "\n"
          - - import ast
            - import boto3
            - import cfnresponse
            - import json
            - import logging
            - logger = logging.getLogger()
            - logger.setLevel(logging.INFO)
            - s3 = boto3.client('s3')
            - ''
            - template = '''\
            - config system global
            - set hostname {Hostname}
            - set admintimeout 60
            - end
            - config system admin
            - edit admin
            - set password {AdminPassword}
            - next
            - end
            - config system settings
            - set allow-subnet-overlap enable
            - end
            - config system interface
            - edit port1
            - set alias public
            - set mode static
            - set ip {Port1IP}
            - set allowaccess ping https ssh fgfm
            - set secondary-IP enable
            - next
            - edit port2
            - set alias private
            - set mode static
            - set ip {Port2IP}
            - set allowaccess ping https ssh
            - set mtu-override enable
            - set mtu 9001
            - next
            - edit port3
            - set alias hasync
            - set mode static
            - set ip {Port3IP}
            - set allowaccess ping
            - set mtu-override enable
            - set mtu 9001
            - next
            - edit port4
            - set alias hamgmt
            - set mode static
            - set ip {Port4IP}
            - set allowaccess ping https ssh
            - set mtu-override enable
            - set mtu 9001
            - next
            - end
            - config system geneve
            - edit gen
            - set interface port2
            - set ip-version ipv4-unicast
            - set remote-ip {LoadBalancerIP}
            - set dstport 6081
            - set type ppp
            - next
            - end
            - config router static
            - edit 1
            - set device gen
            - set gateway {LoadBalancerIP}
            - next
            - edit 2
            - set dst {PrivateSubnetCIDR}
            - set device port2
            - set gateway {PrivateSubnetRouterIP}
            - next
            - end
            - config firewall policy
            - edit 1
            - set name outbound-all
            - set srcintf port2
            - set dstintf port1
            - set srcaddr all
            - set dstaddr all
            - set action accept
            - set schedule always
            - set service ALL
            - set logtraffic all
            - set nat enable
            - next
            - edit 2
            - set name geneve-outbound
            - set srcintf gen
            - set dstintf gen
            - set srcaddr all
            - set dstaddr all
            - set action accept
            - set schedule always
            - set service ALL
            - set logtraffic all
            - next
            - end
            - config system vdom-exception
            - edit 1
            - set object system.interface
            - next
            - edit 2
            - set object router.static
            - next
            - end
            - config system ha
            - set group-name group1
            - set mode a-p
            - set hbdev port3 50
            - set session-pickup enable
            - set ha-mgmt-status enable
            - config ha-mgmt-interface
            - edit 1
            - set interface port4
            - set gateway {HAmgmtSubnetRouterIP}
            - next
            - end
            - set override disable
            - set priority {HApriority}
            - set unicast-hb enable
            - set unicast-hb-peerip {HApeer}
            - end\
            - "'''"
            - ''
            - 'def handler(event, context):'
            - "    dict1 = ast.literal_eval(event['ResourceProperties']['FGT1Info'])"
            - "    dict2 = ast.literal_eval(event['ResourceProperties']['FGT2Info'])"
            - "    fgt1_conf = template.format(**dict1)"
            - "    fgt2_conf = template.format(**dict2)"
            - "    fgt1_result = False"
            - "    fgt2_result = False"
            - "    logger.info('<-- event received: {}'.format(json.dumps(event)))"
            - ''
            - "    try:"
            - "        resp = s3.put_object(Body=fgt1_conf, Bucket=event['ResourceProperties']['S3Bucket'],
              Key='fgt1.txt')"
            - "    except Exception as error:"
            - "        logger.error('<--!! Exception: {}'.format(error))"
            - "        responseData = {'msg':'error'}"
            - "        cfnresponse.send(event, context, cfnresponse.FAILED, responseData)"
            - "        exit()"
            - "    if resp['ResponseMetadata']['HTTPStatusCode'] == 200:"
            - "        fgt1_result = True"
            - "        logger.info('<-- s3 put_object fgt1.txt successful')"
            - ''
            - "    try:"
            - "        resp = s3.put_object(Body=fgt2_conf, Bucket=event['ResourceProperties']['S3Bucket'], Key='fgt2.txt')"
            - "    except Exception as error:"
            - "        logger.error('<--!! Exception: {}'.format(error))"
            - "        responseData = {'msg':'error'}"
            - "        cfnresponse.send(event, context, cfnresponse.FAILED, responseData)"
            - "        exit()"
            - "    if resp['ResponseMetadata']['HTTPStatusCode'] == 200:"
            - "        fgt2_result = True"
            - "        logger.info('<-- s3 put_object fgt2.txt successful')"
            - ''
            - "    if fgt1_result is True and fgt2_result is True:"
            - "        responseData = {'msg':'200'}"
            - "        cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)"
            - "    else:"
            - "        responseData = {'msg':'error'}"
            - "        cfnresponse.send(event, context, cfnresponse.FAILED, responseData)"
            - ''
      Role:
        Fn::GetAtt:
        - LambdaRole
        - Arn
      Timeout: 120
      Handler: index.handler
      Runtime: python2.7
      MemorySize: 128
  RunInitFunction:
    Type: Custom::InitFunction
    DependsOn: InitFunction
    Properties:
      ServiceToken:
        Fn::GetAtt:
        - InitFunction
        - Arn
      S3Bucket:
        Ref: InitS3Bucket
      FGT1Info:
        Fn::Join:
        - ''
        - - "{"
          - "'VPCCIDR':'"
          - Ref: VPCCIDR
          - "',"
          - "'PrivateSubnetCIDR':'"
          - Ref: FortiGate1PrivateCIDR
          - "',"
          - "'PrivateSubnetRouterIP':'"
          - Ref: Private1SubnetRouterIP
          - "',"
          - "'AdminPassword':'"
          - Ref: AdminPw
          - "',"
          - "'HAmgmtSubnetRouterIP':'"
          - Ref: HAMgmt1SubnetRouterIP
          - "',"
          - "'LoadBalancerIP':'"
          - Ref: LoadBalancerIP1
          - "',"
          - "'PublicSubnetRouterIP':'"
          - Ref: Public1SubnetRouterIP
          - "',"
          - "'PrivateSubnetRouterIP':'"
          - Ref: Private1SubnetRouterIP
          - "',"
          - "'Port1IP':'"
          - Ref: FortiGate1PublicIP
          - "',"
          - "'Port2IP':'"
          - Ref: FortiGate1PrivateIP
          - "',"
          - "'Port3IP':'"
          - Ref: FortiGate1HAsyncIP
          - "',"
          - "'Port4IP':'"
          - Ref: FortiGate1HAmgmtIP
          - "',"
          - "'HApeer':'"
          - Fn::Select:
            - '0'
            - Fn::Split:
              - "/"
              - Ref: FortiGate2HAsyncIP
          - "',"
          - "'HApriority':'255',"
          - "'Hostname':'Fgt1-private'"
          - "}"
      FGT2Info:
        Fn::Join:
        - ''
        - - "{"
          - "'VPCCIDR':'"
          - Ref: VPCCIDR
          - "',"
          - "'PrivateSubnetRouterIP':'"
          - Ref: Private2SubnetRouterIP
          - "',"
          - "'PrivateSubnetCIDR':'"
          - Ref: FortiGate2PrivateCIDR
          - "',"
          - "'HAmgmtSubnetRouterIP':'"
          - Ref: HAMgmt2SubnetRouterIP
          - "',"
          - "'AdminPassword':'"
          - Ref: AdminPw
          - "',"
          - "'LoadBalancerIP':'"
          - Ref: LoadBalancerIP2
          - "',"
          - "'PublicSubnetRouterIP':'"
          - Ref: Public2SubnetRouterIP
          - "',"
          - "'PrivateSubnetRouterIP':'"
          - Ref: Private2SubnetRouterIP
          - "',"
          - "'Port1IP':'"
          - Ref: FortiGate2PublicIP
          - "',"
          - "'Port2IP':'"
          - Ref: FortiGate2PrivateIP
          - "',"
          - "'Port3IP':'"
          - Ref: FortiGate2HAsyncIP
          - "',"
          - "'Port4IP':'"
          - Ref: FortiGate2HAmgmtIP
          - "',"
          - "'HApeer':'"
          - Fn::Select:
            - '0'
            - Fn::Split:
              - "/"
              - Ref: FortiGate1HAsyncIP
          - "',"
          - "'HApriority':'1',"
          - "'Hostname':'Fgt2-private'"
          - "}"
Outputs:
  Username:
    Value: admin
    Description: Username for the Fortigates
  Password:
    Value:
      Ref: Fgt1
    Description: Initial password for the FortiGates
  InstanceId1:
    Value:
      Ref: Fgt1
    Description: Instance Id for Fortigate 1
  InstanceId2:
    Value:
      Ref: Fgt2
    Description: Instance Id for Fortigate 2
  ClusterLoginURL:
    Value:
      Fn::Join:
      - ''
      - - https://
        - Ref: ClusterEIP
    Description: Login URL for the public interface of the active FortiGate
  FortiGate1LoginURL:
    Value:
      Fn::Join:
      - ''
      - - https://
        - Ref: Fgt1EIP
    Description: Login URL for the HAmgmt interface of FortiGate 1
  FortiGate2LoginURL:
    Value:
      Fn::Join:
      - ''
      - - https://
        - Ref: Fgt2EIP
    Description: Login URL for the HAmgmt interface of FortiGate 2
  FortiGate1PublicENI:
    Value:
        Ref: fgt1eni0
    Description: ENI ID of Fortigate 1 Public ENI
  FortiGate2PublicENI:
    Value:
        Ref: fgt2eni0
    Description: ENI ID of Fortigate 2 Public ENI
  FortiGate1PrivateENI:
    Value:
      Ref: fgt1eni1
    Description: ENI ID of Fortigate 1 Private ENI
  FortiGate2PrivateENI:
    Value:
      Ref: fgt2eni1
    Description: ENI ID of Fortigate 2 Private ENI
  FortiGate1PrivateIP:
    Value: !GetAtt fgt1eni1.PrimaryPrivateIpAddress
    Description: Private IP of Fortigate 1 Private Interface
  FortiGate2PrivateIP:
    Value: !GetAtt fgt2eni1.PrimaryPrivateIpAddress
    Description: Private IP of Fortigate 2 Private Interface
