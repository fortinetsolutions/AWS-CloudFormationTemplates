{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "(v4.2) AWS CloudFormation Template to deploy a hybrid license based FortiGate AutoScaling solution",
	"Metadata": {
		"AWS::CloudFormation::Interface": {
			"ParameterGroups": [
				{
					"Label": {
						"default": "VPC Configuration"
					},
					"Parameters": [
						"VPCID",
						"VPCCIDR",
						"PublicSubnet1",
						"PrivateSubnet1",
						"PublicSubnet2",
						"PrivateSubnet2"
					]
				},
				{
					"Label": {
						"default": "FortiGate Instance Configuration"
					},
					"Parameters": [
						"CIDRForInstanceAccess",
						"AdminHttpsPort",
						"KeyPair",
						"SsmSecureStringParamName",
						"InitS3Bucket",
						"InternalLBDNSName",
						"AlbListenerPort",
						"AlbTargetGroupPort",
						"NlbListenerPort",
						"NlbTargetGroupPort",
						"APIGatewayURL",
						"EnvironmentTag"
					]
				},
				{
					"Label": {
						"default": "Auto Scaling Configuration"
					},
					"Parameters": [
						"ScaleUpThreshold",
						"ScaleDownThreshold",
						"BYOLInstanceType",
						"ASGBYOLMinSize",
						"ASGBYOLMaxSize",
						"PAYGInstanceType",
						"ASGPAYGMaxSize"
					]
				}
			]
		}
	},
	"Parameters": {
		"VPCID": {
			"Type": "AWS::EC2::VPC::Id",
			"Description": "Select the VPC to use"
		},
		"VPCCIDR": {
			"Type": "String",
			"Default": "10.0.0.0/16",
			"Description": "Provide the network CIDR for the VPC"
		},
		"PublicSubnet1": {
			"Type": "AWS::EC2::Subnet::Id",
			"Description": "Select the subnet to use for PublicSubnet1"
		},
		"PrivateSubnet1": {
			"Type": "AWS::EC2::Subnet::Id",
			"Description": "Select the subnet to use for PrivateSubnet1"
		},
		"PublicSubnet2": {
			"Type": "AWS::EC2::Subnet::Id",
			"Description": "Select the subnet to use for PublicSubnet2"
		},
		"PrivateSubnet2": {
			"Type": "AWS::EC2::Subnet::Id",
			"Description": "Select the subnet to use for PrivateSubnet2"
		},
		"BYOLInstanceType": {
			"Type": "String",
			"Default": "c5.large",
			"Description": "Select the instance type for the BYOL FortiGates",
			"AllowedValues": [
				"t2.small",
				"c5.large",
				"c5.xlarge",
				"c5.2xlarge",
				"c5.4xlarge",
				"c5.9xlarge",
				"c5.18xlarge",
				"c5n.large",
				"c5n.xlarge",
				"c5n.2xlarge",
				"c5n.4xlarge",
				"c5n.9xlarge",
				"c5n.18xlarge"
			]
		},
		"PAYGInstanceType": {
			"Type": "String",
			"Default": "c5.large",
			"Description": "Select the instance type for the PAYG FortiGates",
			"AllowedValues": [
				"t2.small",
				"c5.large",
				"c5.xlarge",
				"c5.2xlarge",
				"c5.4xlarge",
				"c5.9xlarge",
				"c5.18xlarge",
				"c5n.large",
				"c5n.xlarge",
				"c5n.2xlarge",
				"c5n.4xlarge",
				"c5n.9xlarge",
				"c5n.18xlarge"
			]
		},
		"CIDRForInstanceAccess": {
			"Type": "String",
			"Default": "0.0.0.0/0",
			"Description": "Provide a network CIDR from which the FortiGate instances will be accessed"
		},
		"AdminHttpsPort": {
			"Type": "String",
			"Default": "443",
			"Description": "Provide a port to use for the FortiGate HTTPS GUI"
		},
		"KeyPair": {
			"Type": "AWS::EC2::KeyPair::KeyName",
			"Description": "Select a keypair to associate with the FortiGates"
		},
		"SsmSecureStringParamName": {
			"Type": "String",
			"Description": "Provide a name for an existing secure string parameter from the Systems Manager Parameter Store to use as the admin password of the FortiGates"
		},
		"InitS3Bucket": {
			"Type": "String",
			"MinLength": "1",
			"Description": "Provide the Init S3 Bucket name where your license files exists.  ** AWS best practice is to enable bucket encryption and versioning.**"
		},
		"InternalLBDNSName": {
			"Type": "String",
			"MinLength": "1",
			"Description": "Provide the DNS Name of the Internal Load Balancer"
		},
		"AlbListenerPort": {
			"Type": "Number",
			"Default": "80",
			"Description": "Provide the HTTP listener port for the external ALB"
		},
		"AlbTargetGroupPort": {
			"Type": "Number",
			"Default": "8001",
			"Description": "Provide the HTTP target group port for the external ALB"
		},
		"NlbListenerPort": {
			"Type": "Number",
			"Default": "514",
			"Description": "Provide the TCP listener port for the external NLB"
		},
		"NlbTargetGroupPort": {
			"Type": "Number",
			"Default": "514",
			"Description": "Provide the TCP target group port for the external NLB"
		},
		"APIGatewayURL": {
			"Type": "String",
			"Default": "https://{restapi_id}.execute-api.{region}.amazonaws.com/{stage_name}/",
			"Description": "Provide an API Gateway URL to receive notifications for AutoScaling events"
		},
		"EnvironmentTag": {
			"Type": "String",
			"Default": "prod",
			"Description": "Select an environment tag",
			"AllowedValues": [
				"prod",
				"dev",
				"test"
			]
		},
		"ScaleUpThreshold": {
			"Type": "Number",
			"Default": "70",
			"Description": "Provide the value at which a scale up event would take place (CPU Usage)"
		},
		"ScaleDownThreshold": {
			"Type": "Number",
			"Default": "20",
			"Description": "Provide the value at which a scale down event would take place (CPU Usage)"
		},
		"ASGBYOLMinSize": {
			"Type": "Number",
			"Default": "2",
			"Description": "Minimum number of FortiGate instances in the BYOL Auto-Scaling Group."
		},
		"ASGBYOLMaxSize": {
			"Type": "Number",
			"Default": "2",
			"Description": "Maximum number of FortiGate instances in the BYOL Auto-Scaling Group."
		},
		"ASGPAYGMinSize": {
			"Type": "Number",
			"Default": "0",
			"Description": "Minimum number of FortiGate instances in the PAYG Auto-Scaling Group."
		},
		"ASGPAYGMaxSize": {
			"Type": "Number",
			"Default": "5",
			"Description": "Maximum number of FortiGate instances in the PAYG Auto-Scaling Group."
		}
	},
	"Mappings": {
		"RegionMap": {
			"ap-northeast-1": {
				"fgtamib": "ami-021c40c8d7d07a99a",
				"fgtamip": "ami-0b7ea934fc0a83064"
			},
			"ap-northeast-2": {
				"fgtamib": "ami-09c6e2b31c5aeeef5",
				"fgtamip": "ami-0c9c34c5ac1adc829"
			},
			"ap-south-1": {
				"fgtamib": "ami-066e2d633f25457cf",
				"fgtamip": "ami-08509cefe5c6372a8"
			},
			"ap-southeast-1": {
				"fgtamib": "ami-0b09627a8727a840e",
				"fgtamip": "ami-01b05e38c6388f84f"
			},
			"ap-southeast-2": {
				"fgtamib": "ami-03812d85cf5ab60b6",
				"fgtamip": "ami-029bca18bc8f272cd"
			},
			"ca-central-1": {
				"fgtamib": "ami-0e2dfde704479020d",
				"fgtamip": "ami-0b1d312dc1c41030e"
			},
			"eu-central-1": {
				"fgtamib": "ami-084fbc093774e3d55",
				"fgtamip": "ami-0a4498f9a72cf2537"
			},
			"eu-west-1": {
				"fgtamib": "ami-01e8b02ab1ac6f0be",
				"fgtamip": "ami-0c1f71f51fb106a31"
			},
			"eu-west-2": {
				"fgtamib": "ami-0fee8ad3dbfdc59f7",
				"fgtamip": "ami-0d333d8821f37aa36"
			},
			"eu-west-3": {
				"fgtamib": "ami-01f28c942780fe93d",
				"fgtamip": "ami-0a97f4194a0515b21"
			},
			"sa-east-1": {
				"fgtamib": "ami-0e2e26cbaae02e210",
				"fgtamip": "ami-0851b028d263ced22"
			},
			"us-east-1": {
				"fgtamib": "ami-0545ab5cfcb04ae1f",
				"fgtamip": "ami-0532fcbf3ada1987a"
			},
			"us-east-2": {
				"fgtamib": "ami-06c0b5327ae077f9b",
				"fgtamip": "ami-07c2582e55a222dd3"
			},
			"us-west-1": {
				"fgtamib": "ami-0a2dd80d792806156",
				"fgtamip": "ami-0aa77e91cb3eab854"
			},
			"us-west-2": {
				"fgtamib": "ami-0e02bbdf523a30000",
				"fgtamip": "ami-00a5f7f2848b21194"
			}
		}
	},
	"Conditions": {
	},
	"Resources": {
		"InitLambdaRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Principal": {
								"Service": [
									"lambda.amazonaws.com"
								]
							},
							"Action": [
								"sts:AssumeRole"
							]
						}
					]
				},
				"Path": "/",
				"Policies": [
					{
						"PolicyName": "SystemsManagerAccess",
						"PolicyDocument": {
							"Version": "2012-10-17",
							"Statement": [
								{
									"Effect": "Allow",
									"Action": [
										"ssm:GetParameter"
									],
									"Resource": "*"
								},
								{
									"Effect": "Allow",
									"Action": [
										"logs:*"
									],
									"Resource": "*"
								}
							]
						}
					}
				]
			}
		},
		"InitFunction": {
			"Type": "AWS::Lambda::Function",
			"DependsOn": "InitLambdaRole",
			"Properties": {
				"Code": {
					"ZipFile": {
						"Fn::Join": [
							"\n",
							[
								"import boto3",
								"import cfnresponse",
								"import json",
								"import logging",
								"logger = logging.getLogger()",
								"logger.setLevel(logging.INFO)",
								"client = boto3.client('ssm')",
								"",
								"def handler(event, context):",
								"    logger.info('<-- event received: {}'.format(json.dumps(event)))",
								"",
								"    try:",
								"        resp = client.get_parameter(Name=event['ResourceProperties']['SsmSecureStringParamName'], WithDecryption=True)",
								"    except Exception as error:",
								"        logger.error('<--!! Exception: {}'.format(error))",
								"        responseData = {'msg':'error'}",
								"        cfnresponse.send(event, context, cfnresponse.FAILED, responseData)",
								"        return",
								"    if resp['ResponseMetadata']['HTTPStatusCode'] == 200:",
								"        if 'Parameter' in resp:",
								"            if 'Value' in resp['Parameter']:",
								"                logger.info('<-- sussessfully accessed secure string value')",
								"                responseData = {'secret': resp['Parameter']['Value']}",
								"                cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)",
								"            else:",
								"                logger.error('<--!! error accessing the secure string value')",
								"                responseData = {'msg':'error'}",
								"                cfnresponse.send(event, context, cfnresponse.FAILED, responseData)",
								"    else:",
								"        logger.error('<--!! error accessing the secure string value')",
								"        responseData = {'msg':'error'}",
								"        cfnresponse.send(event, context, cfnresponse.FAILED, responseData)",
								""
							]
						]
					}
				},
				"Role": {
					"Fn::GetAtt": [
						"InitLambdaRole",
						"Arn"
					]
				},
				"Timeout": 120,
				"Handler": "index.handler",
				"Runtime": "python2.7",
				"MemorySize": 128
			}
		},
		"RunInitFunction": {
			"Type": "Custom::InitFunction",
			"DependsOn": "InitFunction",
			"Properties": {
				"ServiceToken": {
					"Fn::GetAtt": [
						"InitFunction",
						"Arn"
					]
				},
				"SsmSecureStringParamName": {
					"Ref": "SsmSecureStringParamName"
				}
			}
		},
		"SNSTopicBYOL": {
			"Type": "AWS::SNS::Topic",
			"Properties": {
				"TopicName": {
					"Fn::Join": [
						"",
						[
							{
								"Ref": "AWS::StackName"
							},
							"-",
							{
								"Ref": "EnvironmentTag"
							},
							"-byol"
						]
					]
				}
			}
		},
		"SNSSubscriptionBYOL": {
			"Type": "AWS::SNS::Subscription",
			"Properties": {
				"TopicArn": {
					"Ref": "SNSTopicBYOL"
				},
				"Endpoint": {
					"Ref": "APIGatewayURL"
				},
				"Protocol": "https",
				"DeliveryPolicy": {
					"healthyRetryPolicy": {
						"numRetries": 50,
						"minDelayTarget": 20,
						"maxDelayTarget": 50,
						"numMinDelayRetries": 12,
						"numMaxDelayRetries": 14,
						"numNoDelayRetries": 2,
						"backoffFunction": "exponential"
					}
				}
			}
		},
		"SNSTopicPAYG": {
			"Type": "AWS::SNS::Topic",
			"Properties": {
				"TopicName": {
					"Fn::Join": [
						"",
						[
							{
								"Ref": "AWS::StackName"
							},
							"-",
							{
								"Ref": "EnvironmentTag"
							},
							"-paygo"
						]
					]
				}
			}
		},
		"SNSSubscriptionPAYG": {
			"Type": "AWS::SNS::Subscription",
			"Properties": {
				"TopicArn": {
					"Ref": "SNSTopicPAYG"
				},
				"Endpoint": {
					"Ref": "APIGatewayURL"
				},
				"Protocol": "https",
				"DeliveryPolicy": {
					"healthyRetryPolicy": {
						"numRetries": 50,
						"minDelayTarget": 20,
						"maxDelayTarget": 50,
						"numMinDelayRetries": 12,
						"numMaxDelayRetries": 14,
						"numNoDelayRetries": 2,
						"backoffFunction": "exponential"
					}
				}
			}
		},
		"FGTSecGrpBase": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"VpcId": {
					"Ref": "VPCID"
				},
				"GroupDescription": "FGTSecGrp",
				"SecurityGroupIngress": [
					{
						"Description": "Allow remote access to FGT",
						"IpProtocol": "-1",
						"FromPort": "0",
						"ToPort": "65535",
						"CidrIp": {
							"Ref": "CIDRForInstanceAccess"
						}
					},
					{
						"Description": "Allow lambda access to FGT",
						"IpProtocol": "tcp",
						"FromPort": {
							"Ref": "AdminHttpsPort"
						},
						"ToPort": {
							"Ref": "AdminHttpsPort"
						},
						"CidrIp": "0.0.0.0/0"
					},
					{
						"Description": "Allow local VPC access to FGT",
						"IpProtocol": "-1",
						"FromPort": "0",
						"ToPort": "65535",
						"CidrIp": {
							"Ref": "VPCCIDR"
						}
					}
				]
			}
		},
		"FGTSecGrpALBRule": {
			"DependsOn": "FGTSecGrpBase",
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"GroupId": {
					"Ref": "FGTSecGrpBase"
				},
				"Description": "Allow ALBs to send traffic to FGTs on TargetGroup Port",
				"IpProtocol": "tcp",
				"FromPort": {
					"Ref": "AlbTargetGroupPort"
				},
				"ToPort": {
					"Ref": "AlbTargetGroupPort"
				},
				"SourceSecurityGroupId": {
					"Ref": "ALBSecGrp"
				}
			}
		},
		"FGTSecGrpNLBRule": {
			"DependsOn": "FGTSecGrpBase",
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"GroupId": {
					"Ref": "FGTSecGrpBase"
				},
				"Description": "Allow NLBs to send traffic to FGTs on TargetGroup Port",
				"IpProtocol": "tcp",
				"FromPort": {
					"Ref": "NlbTargetGroupPort"
				},
				"ToPort": {
					"Ref": "NlbTargetGroupPort"
				},
				"CidrIp": "0.0.0.0/0"
			}
		},
		"ExternalNLB": {
			"Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
			"Properties": {
				"Name": {
					"Fn::Join": [
						"",
						[
							{
								"Ref": "AWS::StackName"
							},
							"-ExternalNLB"
						]
					]
				},
				"Scheme": "internet-facing",
				"Subnets": [
					{
						"Ref": "PublicSubnet1"
					},
					{
						"Ref": "PublicSubnet2"
					}
				],
				"Type": "network",
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"",
								[
									{
										"Ref": "AWS::StackName"
									},
									"-ExternalNLB"
								]
							]
						}
					}
				]
			}
		},
		"ExtNLBGrp": {
			"Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
			"Properties": {
				"Name": {
					"Fn::Join": [
						"",
						[
							{
								"Ref": "AWS::StackName"
							},
							"-ext-nlb-grp"
						]
					]
				},
				"Port": {
					"Ref": "NlbTargetGroupPort"
				},
				"Protocol": "TCP",
				"HealthCheckProtocol": "TCP",
				"HealthCheckPort": {
					"Ref": "AdminHttpsPort"
				},
				"TargetType": "instance",
				"VpcId": {
					"Ref": "VPCID"
				}
			}
		},
		"ExternalNLBListener": {
			"Type": "AWS::ElasticLoadBalancingV2::Listener",
			"Properties": {
				"DefaultActions": [
					{
						"Type": "forward",
						"TargetGroupArn": {
							"Ref": "ExtNLBGrp"
						}
					}
				],
				"LoadBalancerArn": {
					"Ref": "ExternalNLB"
				},
				"Port": {
					"Ref": "NlbListenerPort"
				},
				"Protocol": "TCP"
			}
		},
		"ALBSecGrp": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "ALBSecGrp",
				"VpcId": {
					"Ref": "VPCID"
				},
				"SecurityGroupIngress": [
					{
						"IpProtocol": "-1",
						"CidrIp": "0.0.0.0/0"
					}
				],
				"SecurityGroupEgress": [
					{
						"IpProtocol": "-1",
						"CidrIp": "0.0.0.0/0"
					}
				]
			}
		},
		"ExternalALB": {
			"Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
			"Properties": {
				"Name": {
					"Fn::Join": [
						"",
						[
							{
								"Ref": "AWS::StackName"
							},
							"-ExternalALB"
						]
					]
				},
				"Scheme": "internet-facing",
				"Subnets": [
					{
						"Ref": "PublicSubnet1"
					},
					{
						"Ref": "PublicSubnet2"
					}
				],
				"SecurityGroups": [
					{
						"Ref": "ALBSecGrp"
					}
				],
				"Type": "application",
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"",
								[
									{
										"Ref": "AWS::StackName"
									},
									"-ExternalALB"
								]
							]
						}
					}
				]
			}
		},
		"ExtALBGrp": {
			"Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
			"Properties": {
				"Name": {
					"Fn::Join": [
						"",
						[
							{
								"Ref": "AWS::StackName"
							},
							"-ext-alb-grp"
						]
					]
				},
				"Port": {
					"Ref": "AlbTargetGroupPort"
				},
				"Protocol": "HTTP",
				"HealthCheckProtocol": "HTTPS",
				"HealthCheckPath": "/login",
				"HealthCheckPort": {
					"Ref": "AdminHttpsPort"
				},
				"TargetType": "instance",
				"VpcId": {
					"Ref": "VPCID"
				}
			}
		},
		"ExternalALBListener": {
			"Type": "AWS::ElasticLoadBalancingV2::Listener",
			"Properties": {
				"DefaultActions": [
					{
						"Type": "forward",
						"TargetGroupArn": {
							"Ref": "ExtALBGrp"
						}
					}
				],
				"LoadBalancerArn": {
					"Ref": "ExternalALB"
				},
				"Port": {
					"Ref": "AlbListenerPort"
				},
				"Protocol": "HTTP"
			}
		},
		"ASGRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Statement": [
						{
							"Effect": "Allow",
							"Principal": {
								"Service": [
									"autoscaling.amazonaws.com"
								]
							},
							"Action": [
								"sts:AssumeRole"
							]
						}
					]
				},
				"Path": "/",
				"ManagedPolicyArns": [
					"arn:aws:iam::aws:policy/service-role/AutoScalingNotificationAccessRole"
				]
			}
		},
		"LaunchConfigBYOL": {
			"Type": "AWS::AutoScaling::LaunchConfiguration",
			"Properties": {
				"ImageId": {
					"Fn::FindInMap": [
						"RegionMap",
						{
							"Ref": "AWS::Region"
						},
						"fgtamib"
					]
				},
				"SecurityGroups": [
					{
						"Ref": "FGTSecGrpBase"
					}
				],
				"KeyName": {
					"Ref": "KeyPair"
				},
				"InstanceType": {
					"Ref": "BYOLInstanceType"
				},
				"AssociatePublicIpAddress": "true",
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": [
							"\n",
							[
								"config system global",
								{
									"Fn::Sub": "set admin-sport ${AdminHttpsPort}"
								},
								"set pre-login-banner disable",
								"end",
								"config system admin",
								"edit admin",
								"set force-password-change disable",
								{
									"Fn::Sub": [
										"set password ${secret}",
										{
											"secret": {
												"Fn::GetAtt": [
													"RunInitFunction",
													"secret"
												]
											}
										}
									]
								},
								"next",
								"end",
								"config system interface",
								"edit port2",
								"set vdom root",
								"set mode dhcp",
								"set role lan",
								"set defaultgw disable",
								"set dns-server-override disable",
								"set mtu-override enable",
								"set mtu 9001",
								"next",
								"end",
								"config firewall address",
								"edit internal_load_balancer",
								"set type fqdn",
								{
									"Fn::Sub": "set fqdn ${InternalLBDNSName}"
								},
								"set associated-interface port2",
								"next",
								"end",
								"config firewall vip",
								"edit internal_lb_vip",
								"set type fqdn",
								"set mapped-addr internal_load_balancer",
								"set extintf port1",
								"set portforward enable",
								"set extport 8001",
								"set mappedport 80",
								"next",
								"end",
								"config firewall policy",
								"edit 0",
								"set name lb_vip",
								"set srcintf port1",
								"set dstintf port2",
								"set srcaddr all",
								"set dstaddr internal_lb_vip",
								"set action accept",
								"set schedule always",
								"set service ALL",
								"set fsso disable",
								"next",
								"end"
							]
						]
					}
				}
			}
		},
		"ASGLifecycleHookLaunchBYOL": {
			"Type": "AWS::AutoScaling::LifecycleHook",
			"Properties": {
				"AutoScalingGroupName": {
					"Ref": "ASGBYOL"
				},
				"DefaultResult": "ABANDON",
				"HeartbeatTimeout": "600",
				"LifecycleHookName": {
					"Fn::Join": [
						"",
						[
							{
								"Ref": "AWS::StackName"
							},
							"-",
							{
								"Ref": "EnvironmentTag"
							},
							"-fgt-launch-lch-byol"
						]
					]
				},
				"LifecycleTransition": "autoscaling:EC2_INSTANCE_LAUNCHING",
				"NotificationMetadata": {
					"Fn::Join": [
						"",
						[
							{
								"Ref": "PublicSubnet1"
							},
							":",
							{
								"Ref": "PrivateSubnet1"
							},
							":",
							{
								"Ref": "PublicSubnet2"
							},
							":",
							{
								"Ref": "PrivateSubnet2"
							}
						]
					]
				},
				"NotificationTargetARN": {
					"Ref": "SNSTopicBYOL"
				},
				"RoleARN": {
					"Fn::GetAtt": [
						"ASGRole",
						"Arn"
					]
				}
			}
		},
		"ASGLifecycleHookTerminateBYOL": {
			"Type": "AWS::AutoScaling::LifecycleHook",
			"Properties": {
				"AutoScalingGroupName": {
					"Ref": "ASGBYOL"
				},
				"DefaultResult": "ABANDON",
				"HeartbeatTimeout": "600",
				"LifecycleHookName": {
					"Fn::Join": [
						"",
						[
							{
								"Ref": "AWS::StackName"
							},
							"-",
							{
								"Ref": "EnvironmentTag"
							},
							"-fgt-terminate-lch-byol"
						]
					]
				},
				"LifecycleTransition": "autoscaling:EC2_INSTANCE_TERMINATING",
				"NotificationTargetARN": {
					"Ref": "SNSTopicBYOL"
				},
				"RoleARN": {
					"Fn::GetAtt": [
						"ASGRole",
						"Arn"
					]
				}
			}
		},
		"ASGBYOL": {
			"Type": "AWS::AutoScaling::AutoScalingGroup",
			"DependsOn": "SNSTopicBYOL",
			"Properties": {
				"AutoScalingGroupName": {
					"Fn::Join": [
						"",
						[
							{
								"Ref": "AWS::StackName"
							},
							"-",
							{
								"Ref": "EnvironmentTag"
							},
							"-byol"
						]
					]
				},
				"HealthCheckGracePeriod" : 800,
				"DesiredCapacity": {
					"Ref": "ASGBYOLMinSize"
				},
				"NotificationConfigurations": [
					{
						"TopicARN": {
							"Ref": "SNSTopicBYOL"
						},
						"NotificationTypes": [
							"autoscaling:TEST_NOTIFICATION",
							"autoscaling:EC2_INSTANCE_LAUNCH",
							"autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
							"autoscaling:EC2_INSTANCE_TERMINATE",
							"autoscaling:EC2_INSTANCE_TERMINATE_ERROR"
						]
					}
				],
				"LaunchConfigurationName": {
					"Ref": "LaunchConfigBYOL"
				},
				"MaxSize": {
					"Ref": "ASGBYOLMaxSize"
				},
				"MinSize": {
					"Ref": "ASGBYOLMinSize"
				},
				"TerminationPolicies": [
					"NewestInstance"
				],
				"TargetGroupARNs": [
					{
						"Ref": "ExtNLBGrp"
					},
					{
						"Ref": "ExtALBGrp"
					}
				],
				"VPCZoneIdentifier": [
					{
						"Ref": "PublicSubnet1"
					},
					{
						"Ref": "PublicSubnet2"
					}
				],
				"Tags": [
					{
						"Key": "Fortigate-S3-License-Bucket",
						"Value": {
							"Ref": "InitS3Bucket"
						},
						"PropagateAtLaunch": "true"
					},
					{
						"Key": "Fortigate-License",
						"Value": "byol",
						"PropagateAtLaunch": "true"
					},
					{
						"Key": "Fortigate-Admin-Sport",
						"Value": {
							"Ref": "AdminHttpsPort"
						},
						"PropagateAtLaunch": "false"
					},
					{
						"Key": "Fortigate-AutoScale-Group-MinSize",
						"Value": {
							"Ref": "ASGBYOLMinSize"
						},
						"PropagateAtLaunch": "false"
					},
					{
						"Key": "SsmSecureStringParamName",
						"Value": {
							"Ref": "SsmSecureStringParamName"
						},
						"PropagateAtLaunch": "true"
					},
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"",
								[
									{
										"Ref": "AWS::StackName"
									},
									"-",
									{
										"Ref": "EnvironmentTag"
									},
									"-byol-asg-instance"
								]
							]
						},
						"PropagateAtLaunch": "true"
					}
				]
			}
		},
		"LaunchConfigPAYG": {
			"Type": "AWS::AutoScaling::LaunchConfiguration",
			"Properties": {
				"ImageId": {
					"Fn::FindInMap": [
						"RegionMap",
						{
							"Ref": "AWS::Region"
						},
						"fgtamip"
					]
				},
				"SecurityGroups": [
					{
						"Ref": "FGTSecGrpBase"
					}
				],
				"KeyName": {
					"Ref": "KeyPair"
				},
				"InstanceType": {
					"Ref": "PAYGInstanceType"
				},
				"AssociatePublicIpAddress": "true",
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": [
							"\n",
							[
								"config system global",
								{
									"Fn::Sub": "set admin-sport ${AdminHttpsPort}"
								},
								"set pre-login-banner disable",
								"end",
								"config system admin",
								"edit admin",
								"set force-password-change disable",
								{
									"Fn::Sub": [
										"set password ${secret}",
										{
											"secret": {
												"Fn::GetAtt": [
													"RunInitFunction",
													"secret"
												]
											}
										}
									]
								},
								"next",
								"end",
								"config system interface",
								"edit port2",
								"set vdom root",
								"set mode dhcp",
								"set role lan",
								"set defaultgw disable",
								"set dns-server-override disable",
								"set mtu-override enable",
								"set mtu 9001",
								"next",
								"end",
								"config firewall address",
								"edit internal_load_balancer",
								"set type fqdn",
								{
									"Fn::Sub": "set fqdn ${InternalLBDNSName}"
								},
								"set associated-interface port2",
								"next",
								"end",
								"config firewall vip",
								"edit internal_lb_vip",
								"set type fqdn",
								"set mapped-addr internal_load_balancer",
								"set extintf port1",
								"set portforward enable",
								"set extport 8001",
								"set mappedport 80",
								"next",
								"end",
								"config firewall policy",
								"edit 0",
								"set name lb_vip",
								"set srcintf port1",
								"set dstintf port2",
								"set srcaddr all",
								"set dstaddr internal_lb_vip",
								"set action accept",
								"set schedule always",
								"set service ALL",
								"set fsso disable",
								"next",
								"end"
							]
						]
					}
				}
			}
		},
		"ASGLifecycleHookLaunchPAYG": {
			"Type": "AWS::AutoScaling::LifecycleHook",
			"Properties": {
				"AutoScalingGroupName": {
					"Ref": "ASGPAYG"
				},
				"DefaultResult": "ABANDON",
				"HeartbeatTimeout": "600",
				"LifecycleHookName": {
					"Fn::Join": [
						"",
						[
							{
								"Ref": "AWS::StackName"
							},
							"-",
							{
								"Ref": "EnvironmentTag"
							},
							"-fgt-launch-lch-paygo"
						]
					]
				},
				"LifecycleTransition": "autoscaling:EC2_INSTANCE_LAUNCHING",
				"NotificationMetadata": {
					"Fn::Join": [
						"",
						[
							{
								"Ref": "PublicSubnet1"
							},
							":",
							{
								"Ref": "PrivateSubnet1"
							},
							":",
							{
								"Ref": "PublicSubnet2"
							},
							":",
							{
								"Ref": "PrivateSubnet2"
							}
						]
					]
				},
				"NotificationTargetARN": {
					"Ref": "SNSTopicPAYG"
				},
				"RoleARN": {
					"Fn::GetAtt": [
						"ASGRole",
						"Arn"
					]
				}
			}
		},
		"ASGLifecycleHookTerminatePAYG": {
			"Type": "AWS::AutoScaling::LifecycleHook",
			"Properties": {
				"AutoScalingGroupName": {
					"Ref": "ASGPAYG"
				},
				"DefaultResult": "ABANDON",
				"HeartbeatTimeout": "600",
				"LifecycleHookName": {
					"Fn::Join": [
						"",
						[
							{
								"Ref": "AWS::StackName"
							},
							"-",
							{
								"Ref": "EnvironmentTag"
							},
							"-fgt-terminate-lch-paygo"
						]
					]
				},
				"LifecycleTransition": "autoscaling:EC2_INSTANCE_TERMINATING",
				"NotificationTargetARN": {
					"Ref": "SNSTopicPAYG"
				},
				"RoleARN": {
					"Fn::GetAtt": [
						"ASGRole",
						"Arn"
					]
				}
			}
		},
		"ASGPAYG": {
			"Type": "AWS::AutoScaling::AutoScalingGroup",
			"DependsOn": "SNSTopicPAYG",
			"Properties": {
				"AutoScalingGroupName": {
					"Fn::Join": [
						"",
						[
							{
								"Ref": "AWS::StackName"
							},
							"-",
							{
								"Ref": "EnvironmentTag"
							},
							"-paygo"
						]
					]
				},
				"HealthCheckGracePeriod" : 800,
				"DesiredCapacity": "0",
				"NotificationConfigurations": [
					{
						"TopicARN": {
							"Ref": "SNSTopicPAYG"
						},
						"NotificationTypes": [
							"autoscaling:TEST_NOTIFICATION",
							"autoscaling:EC2_INSTANCE_LAUNCH",
							"autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
							"autoscaling:EC2_INSTANCE_TERMINATE",
							"autoscaling:EC2_INSTANCE_TERMINATE_ERROR"
						]
					}
				],
				"LaunchConfigurationName": {
					"Ref": "LaunchConfigPAYG"
				},
				"MinSize": {
					"Ref": "ASGPAYGMinSize"
				},
				"MaxSize": {
					"Ref": "ASGPAYGMaxSize"
				},
				"TerminationPolicies": [
					"NewestInstance"
				],
				"TargetGroupARNs": [
					{
						"Ref": "ExtNLBGrp"
					},
					{
						"Ref": "ExtALBGrp"
					}
				],
				"VPCZoneIdentifier": [
					{
						"Ref": "PublicSubnet1"
					},
					{
						"Ref": "PublicSubnet2"
					}
				],
				"Tags": [
					{
						"Key": "Fortigate-S3-License-Bucket",
						"Value": {
							"Ref": "InitS3Bucket"
						},
						"PropagateAtLaunch": "true"
					},
					{
						"Key": "Fortigate-License",
						"Value": "paygo",
						"PropagateAtLaunch": "true"
					},
					{
						"Key": "Fortigate-Admin-Sport",
						"Value": {
							"Ref": "AdminHttpsPort"
						},
						"PropagateAtLaunch": "false"
					},
					{
						"Key": "Fortigate-AutoScale-Group-MinSize",
						"Value": "0",
						"PropagateAtLaunch": "false"
					},
					{
						"Key": "SsmSecureStringParamName",
						"Value": {
							"Ref": "SsmSecureStringParamName"
						},
						"PropagateAtLaunch": "true"
					},
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"",
								[
									{
										"Ref": "AWS::StackName"
									},
									"-",
									{
										"Ref": "EnvironmentTag"
									},
									"-paygo-asg-instance"
								]
							]
						},
						"PropagateAtLaunch": "true"
					}
				]
			}
		},
		"ScaleInPolicy": {
			"Type": "AWS::AutoScaling::ScalingPolicy",
			"Properties": {
				"AdjustmentType": "ChangeInCapacity",
				"AutoScalingGroupName": {
					"Ref": "ASGPAYG"
				},
				"ScalingAdjustment": "-1"
			}
		},
		"ScaleOutPolicy": {
			"Type": "AWS::AutoScaling::ScalingPolicy",
			"Properties": {
				"AdjustmentType": "ChangeInCapacity",
				"AutoScalingGroupName": {
					"Ref": "ASGPAYG"
				},
				"ScalingAdjustment": "1"
			}
		},
		"CPUAlarmLow": {
			"Type": "AWS::CloudWatch::Alarm",
			"Properties": {
				"EvaluationPeriods": "1",
				"Statistic": "Average",
				"Threshold": {
					"Ref": "ScaleDownThreshold"
				},
				"AlarmDescription": "This metric monitors ec2 cpu utilization",
				"Period": "300",
				"AlarmActions": [
					{
						"Ref": "ScaleInPolicy"
					}
				],
				"Namespace": "AWS/EC2",
				"Dimensions": [
					{
						"Name": "AutoScalingGroupName",
						"Value": {
							"Ref": "ASGBYOL"
						}
					}
				],
				"ComparisonOperator": "LessThanOrEqualToThreshold",
				"MetricName": "CPUUtilization"
			}
		},
		"CPUAlarmHigh": {
			"Type": "AWS::CloudWatch::Alarm",
			"Properties": {
				"EvaluationPeriods": "1",
				"Statistic": "Average",
				"Threshold": {
					"Ref": "ScaleUpThreshold"
				},
				"AlarmDescription": "This metric monitors ec2 cpu utilization",
				"Period": "300",
				"AlarmActions": [
					{
						"Ref": "ScaleOutPolicy"
					}
				],
				"Namespace": "AWS/EC2",
				"Dimensions": [
					{
						"Name": "AutoScalingGroupName",
						"Value": {
							"Ref": "ASGBYOL"
						}
					}
				],
				"ComparisonOperator": "GreaterThanOrEqualToThreshold",
				"MetricName": "CPUUtilization"
			}
		}
	},
	"Outputs": {
		"Username": {
			"Value": "admin",
			"Description": "Username for the Fortigates"
		},
		"SsmParameterName": {
			"Value": {
				"Ref": "SsmSecureStringParamName"
			},
			"Description": "The latest version of this SSM Secure String Parameter"
		},
		"Alb": {
			"Value": {
				"Ref": "ExternalALB"
			},
			"Description": "The External Application Load Balancer"
		},
		"Nlb": {
			"Value": {
				"Ref": "ExternalNLB"
			},
			"Description": "The External Network Load Balancer"
		}
	}
}